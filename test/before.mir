--- |
  ; ModuleID = 'test.ll'
  source_filename = "test.c"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "riscv32"
  
  ; Function Attrs: noinline nounwind optnone
  define dso_local i32 @test(i32 noundef %a, i32 noundef %b) #0 {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    %result = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp sgt i32 %0, %1
    br i1 %cmp, label %if.then, label %if.else
  
  if.then:                                          ; preds = %entry
    %2 = load i32, ptr %a.addr, align 4
    %add = add nsw i32 %2, 7
    store i32 %add, ptr %result, align 4
    br label %if.end
  
  if.else:                                          ; preds = %entry
    %3 = load i32, ptr %a.addr, align 4
    %sub = sub nsw i32 %3, 9
    store i32 %sub, ptr %result, align 4
    br label %if.end
  
  if.end:                                           ; preds = %if.else, %if.then
    %4 = load i32, ptr %result, align 4
    ret i32 %4
  }
  
  attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv32" "target-features"="+32bit,+a,+c,+m,+relax,+zaamo,+zalrsc,+zmmul,-b,-d,-e,-experimental-sdext,-experimental-sdtrig,-experimental-smctr,-experimental-ssctr,-experimental-svukte,-experimental-xqcia,-experimental-xqciac,-experimental-xqcicli,-experimental-xqcicm,-experimental-xqcics,-experimental-xqcicsr,-experimental-xqciint,-experimental-xqcilo,-experimental-xqcilsm,-experimental-xqcisls,-experimental-zalasr,-experimental-zicfilp,-experimental-zicfiss,-experimental-zvbc32e,-experimental-zvkgs,-f,-h,-sha,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smcdeleg,-smcsrind,-smdbltrp,-smepmp,-smmpm,-smnpm,-smrnmi,-smstateen,-ssaia,-ssccfg,-ssccptr,-sscofpmf,-sscounterenw,-sscsrind,-ssdbltrp,-ssnpm,-sspm,-ssqosid,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-supm,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-svvptc,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-xwchc,-za128rs,-za64rs,-zabha,-zacas,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfbfmin,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zicsr,-zifencei,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-ztso,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfbfmin,-zvfbfwma,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
  
  !llvm.module.flags = !{!0, !1, !2, !4, !5}
  !llvm.ident = !{!6}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"target-abi", !"ilp32"}
  !2 = !{i32 6, !"riscv-isa", !3}
  !3 = !{!"rv32i2p1_m2p0_a2p1_c2p0_zmmul1p0_zaamo1p0_zalrsc1p0"}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{i32 8, !"SmallDataLimit", i32 0}
  !6 = !{!"clang version 20.0.0git (git@github.com:u0126303/morpheus.git ed2b4b854f4a472a299e3e4e3acc2ad7389e88e3)"}

...
---
name:            test
alignment:       2
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          true
isSSA:           false
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr, preferred-register: '', flags: [  ] }
  - { id: 1, class: gpr, preferred-register: '', flags: [  ] }
  - { id: 2, class: gpr, preferred-register: '', flags: [  ] }
  - { id: 3, class: gpr, preferred-register: '', flags: [  ] }
  - { id: 4, class: gpr, preferred-register: '', flags: [  ] }
  - { id: 5, class: gpr, preferred-register: '', flags: [  ] }
  - { id: 6, class: gpr, preferred-register: '', flags: [  ] }
  - { id: 7, class: gpr, preferred-register: '', flags: [  ] }
  - { id: 8, class: gpr, preferred-register: '', flags: [  ] }
liveins:
  - { reg: '$x10', virtual-reg: '%0' }
  - { reg: '$x11', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  12
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -4, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -8, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
  - { id: 2, name: result, type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      local-offset: -12, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.0.entry:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $x10, $x11
  
    %1:gpr = COPY $x11
    %0:gpr = COPY $x10
    SW %0, %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
    SW %1, %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
    %2:gpr = LW %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
    %3:gpr = LW %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
    BGE %3, %2, %bb.2
    PseudoBR %bb.1
  
  bb.1.if.then:
    successors: %bb.3(0x80000000)
  
    %6:gpr = LW %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
    %7:gpr = nsw ADDI %6, 7
    SW %7, %stack.2.result, 0 :: (store (s32) into %ir.result)
    PseudoBR %bb.3
  
  bb.2.if.else:
    successors: %bb.3(0x80000000)
  
    %4:gpr = LW %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gpr = ADDI %4, -9
    SW %5, %stack.2.result, 0 :: (store (s32) into %ir.result)
    PseudoBR %bb.3
  
  bb.3.if.end:
    %8:gpr = LW %stack.2.result, 0 :: (dereferenceable load (s32) from %ir.result)
    $x10 = COPY %8
    PseudoRET implicit $x10

...
